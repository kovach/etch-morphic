module Core = file "core/core.mor"
  expose {
    module String expose { int_to_string },
    module Array expose { concat },
    module Io expose { writeln },
  }

module Stream = {

  pub type Stream k v {
    Stream(
      ()        -> Bool,       // valid
      ()        -> k,          // index
      (k, Bool) -> Stream k v, // seek
      ()        -> Bool,       // ready
      ()        -> v,          // value
    )
  }

  pub max(a: Int, b: Int): Int = if a < b {b} else {a}
  pub bool_to_nat(b : Bool) : Int = if b {1} else {0}

  pub range(lo: Int, hi: Int): Stream Int Int =
    Stream(
      \()     -> lo < hi,
      \()     -> lo,
      \(j, r) -> range(max(lo, j + bool_to_nat(r)), hi),
      \()     -> True,
      \()     -> lo
    )

  // 15% slower on 3-way vec mul microbenchmark
  pub type Ord { Lt, Gt, Eq }
  pub sparse_aux_cmp(pos: Int, cmp: (k, k) -> Ord, is: Array k, vs: Array v): Stream k v =
    Stream(
      \()     -> pos < len(is),
      \()     -> get(is, pos),
      \(j, r) ->
        let i = get(is, pos) in
        let advance =
          match cmp(i, j) {
            Lt -> True,
            Eq -> r,
            Gt -> False } in
        let pos_ = if advance { pos + 1 } else { pos } in
        sparse_aux_cmp(pos_, cmp, is, vs) ,
      \()     -> True,
      \()     -> get(vs, pos)
    )

  pub sparse_aux(pos: Int, lt: (k, k) -> Bool, eq: (k, k) -> Bool, is: Array k, vs: Array v): Stream k v =
    Stream(
      \()     -> pos < len(is),
      \()     -> get(is, pos),
      \(j, r) ->
        let i = get(is, pos) in
        let advance = lt(i, j) || (r && eq(i, j)) in
        let pos_ = if advance { pos + 1 } else { pos } in
        sparse_aux(pos_, lt, eq, is, vs) ,
      \()     -> True,
      \()     -> get(vs, pos)
    )

  pub intCmp(i: Int, j: Int): Ord = if i < j { Lt } else { if i = j { Eq } else { Gt } }

  pub sparse(s: SparseArray Int Int): Stream Int Int =
    let SparseArray(is, vs) = s in
    sparse_aux(0, \(i,j) -> i < j, \(i,j) -> i = j, is, vs)

  pub multiply(mul: (v1, v2) -> v3, a: Stream Int v1, b: Stream Int v2): Stream Int v3 =
    let Stream(validA, indexA, seekA, readyA, valueA) = a in
    let Stream(validB, indexB, seekB, readyB, valueB) = b in
    Stream(
      \()     -> validA() && validB(),
      \()     -> max(indexA(), indexB()),
      \(j, r) -> multiply(mul, seekA(j, r), seekB(j, r)),
      \()     -> readyA() && readyB() && indexA() = indexB(),
      \()     -> mul(valueA(), valueB())
    )

  pub intMul(a: Stream Int Int, b: Stream Int Int): Stream Int Int = multiply(\(i,j) -> i*j, a, b)

  pub mapWithKey(f: (k, v1) -> v2, s: Stream k v1): Stream k v2 =
    let Stream(valid, index, seek, ready, value) = s in
    Stream(valid, index, \(i,r) -> mapWithKey(f, seek(i,r)), ready, \() -> f(index(), value()))

  pub map(f: v1 -> v2, s: Stream k v1): Stream k v2 = mapWithKey(\(_, v) -> f(v), s)

  pub fold(f: (b,k,v) -> b, s: Stream k v, acc: b): b =
    let Stream(valid, index, seek, ready, value) = s in
    if valid() {
      let r = ready() in
      let i = index() in
      let acc_ = if r { f(acc, i, value()) } else { acc } in
      fold(f, seek(i, r), acc_)
    } else { acc }

  pub type SparseArray k v { SparseArray(Array k, Array v) }

  pub toArray(s: Stream k v): SparseArray k v =
    fold(\(SparseArray(ks, vs), k, v) -> SparseArray(push(ks, k), push(vs, v)),
         s, SparseArray([], []))

  pub sum(s : Stream k Int) : Int =
    fold(\(acc, _, v) -> acc + v, s, 0)

  pub test3(n: Int) : Int =
    let mul = \(i,j) -> i * j in
    let i = range(0,n) in
    let j = range(0,n) in
    let k = range(0,n) in
    sum(multiply(mul, i, multiply(mul, j, k)))

  pub test4_aux(n: Int): SparseArray Int Int =
    let mul = \(i,j) -> i * j in
    let a = toArray(map(\k -> k, range(0,n))) in
    a

  pub test4(s: SparseArray Int Int) : Int =
    let x = sparse(s) in
    sum(intMul(x, intMul(x,x)))
}

pub n: Int = 10000000

pub repeat(fn: () -> Int, count: Int): Int =
  if count <= 1 { fn() } else { let _ = fn() in repeat(fn, count-1) }

proc main(): () =
  let count = 10 in
  do writeln(int_to_string(repeat(\() -> Stream.test3(n), count))) then
  let s = Stream.test4_aux(n) in
  do writeln(int_to_string(repeat(\() -> Stream.test4(s), count))) then
  ()

// some array functions
// arr : Array val
// get(arr, idx) : val
// extract(arr, idx) : (val, val -> arr)
// push(arr, val) : arr
// pop(arr) : val
